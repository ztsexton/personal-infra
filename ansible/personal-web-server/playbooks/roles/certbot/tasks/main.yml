---
- name: Install required packages
  apt:
    name: 
      - certbot
      - python3-certbot-nginx
      - ssl-cert
    state: present
    update_cache: yes

# Check if certificates already exist
- name: Check if certificates already exist
  stat:
    path: "/etc/letsencrypt/live/{{ item.server_name }}/fullchain.pem"
  register: cert_exists
  loop: "{{ sites }}"
  ignore_errors: yes

# Stop NGINX temporarily if using standalone mode
- name: Stop NGINX temporarily if using standalone mode
  service:
    name: nginx
    state: stopped
  when: certbot.standalone | default(false)
  register: nginx_stopped_for_cert
  ignore_errors: yes

# Try to obtain certificates
- name: Obtain certificates for domains (standalone method)
  command: >
    certbot certonly --standalone
    {{ '--staging' if certbot.use_staging | default(false) else '' }}
    --non-interactive --agree-tos 
    --email {{ item.item.certbot_email | default('webmaster@' + item.item.server_name) }}
    -d {{ item.item.server_name }}
    --cert-name {{ item.item.server_name }}
  loop: "{{ cert_exists.results }}"
  when: 
    - not item.stat.exists | default(false) 
    - certbot.create_if_missing | default(true)
    - certbot.standalone | default(false)
    - nginx_stopped_for_cert is not failed
  register: certbot_standalone_result
  ignore_errors: yes

# Start NGINX again after standalone certificate issuance
- name: Start NGINX again after standalone certificate issuance
  service:
    name: nginx
    state: started
  when: nginx_stopped_for_cert.changed | default(false)
  ignore_errors: yes

# Check if certificates exist after attempting to create them
- name: Recheck if certificates exist after obtaining them
  stat:
    path: "/etc/letsencrypt/live/{{ item.server_name }}/fullchain.pem"
  register: certs_after_creation
  loop: "{{ sites }}"
  ignore_errors: yes

# Configure SSL only for domains where we have certificates
- name: Configure NGINX for SSL only for domains with certificates
  include_tasks: configure_nginx_ssl.yml
  vars:
    domain_has_cert: "{{ certs_after_creation.results | selectattr('item.server_name', 'equalto', item.server_name) | selectattr('stat.exists', 'defined') | selectattr('stat.exists') | list | length > 0 }}"
  loop: "{{ sites }}"
  when: domain_has_cert
  ignore_errors: yes

# Set up auto-renewal
- name: Set up auto-renewal
  cron:
    name: "Certbot renewal"
    job: "certbot renew --quiet --no-self-upgrade {{ '--pre-hook \"systemctl stop nginx\"' if certbot.standalone | default(false) else '' }} {{ '--post-hook \"' + certbot.renew_hook + '\"' if certbot.renew_hook is defined else '' }}"
    hour: "3"
    minute: "30"
    weekday: "1"  # Monday