---
- name: Update package cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install NGINX package
  ansible.builtin.apt:
    name: nginx
    state: present
    update_cache: no
  register: nginx_install

- name: Wait for systemd to recognize the new NGINX service
  ansible.builtin.command: systemctl daemon-reload
  changed_when: false
  when: nginx_install.changed

- name: Display installed NGINX information
  ansible.builtin.command: dpkg -l | grep nginx
  register: nginx_info
  changed_when: false
  failed_when: false

- name: Show NGINX package information
  ansible.builtin.debug:
    msg: "{{ nginx_info.stdout_lines }}"

# Stop Apache and free up ports
- name: Check if Apache is running
  ansible.builtin.command: systemctl status apache2
  register: apache_status
  changed_when: false
  failed_when: false

- name: Stop and disable Apache
  ansible.builtin.service:
    name: apache2
    state: stopped
    enabled: no
  ignore_errors: yes
  when: "'active (running)' in apache_status.stdout"

- name: Create directory for Let's Encrypt verification
  ansible.builtin.file:
    path: /var/www/letsencrypt/.well-known/acme-challenge
    state: directory
    mode: '0755'
    recurse: yes

# Ensure both www-data and nginx users exist
- name: Check if www-data user exists
  ansible.builtin.getent:
    database: passwd
    key: www-data
  register: www_data_user_exists
  failed_when: false

- name: Debug www-data user check
  ansible.builtin.debug:
    var: www_data_user_exists

- name: Create www-data user if it doesn't exist
  ansible.builtin.user:
    name: www-data
    shell: /usr/sbin/nologin
    system: yes
    createhome: no
    comment: "Web Server User"
  when: www_data_user_exists.failed or www_data_user_exists.ansible_facts is not defined

- name: Check if nginx user exists
  ansible.builtin.getent:
    database: passwd
    key: nginx
  register: nginx_user_exists
  failed_when: false

- name: Debug nginx user check
  ansible.builtin.debug:
    var: nginx_user_exists

- name: Create nginx user if it doesn't exist
  ansible.builtin.user:
    name: nginx
    shell: /usr/sbin/nologin
    system: yes
    createhome: no
    comment: "NGINX web server"
  when: nginx_user_exists.failed or nginx_user_exists.ansible_facts is not defined

- name: Ensure nginx.conf uses the correct user
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^user\s+'
    line: 'user www-data;'
    insertbefore: BOF
  register: nginx_conf_modified

# Make sure ports 80 and 443 are free
- name: Check for processes listening on port 80
  ansible.builtin.shell: ss -tulpn | grep ':80 '
  register: port_80_check
  changed_when: false
  failed_when: false

- name: Check for processes listening on port 443
  ansible.builtin.shell: ss -tulpn | grep ':443 '
  register: port_443_check
  changed_when: false
  failed_when: false

- name: Display processes on port 80
  ansible.builtin.debug:
    msg: "Process on port 80: {{ port_80_check.stdout }}"
  when: port_80_check.rc == 0

- name: Display processes on port 443
  ansible.builtin.debug:
    msg: "Process on port 443: {{ port_443_check.stdout }}"
  when: port_443_check.rc == 0

# Check if nginx binary exists
- name: Check if nginx binary exists
  ansible.builtin.stat:
    path: /usr/sbin/nginx
  register: nginx_binary

- name: Show nginx binary status
  ansible.builtin.debug:
    msg: "NGINX binary exists: {{ nginx_binary.stat.exists }}"

# Add explicit task to verify nginx configuration before attempting to start
- name: Verify nginx configuration file is accurate
  ansible.builtin.command: nginx -t
  register: nginx_config_test
  changed_when: false
  failed_when: false
  when: nginx_binary.stat.exists

- name: Display nginx configuration test results
  ansible.builtin.debug:
    msg: "{{ nginx_config_test.stdout_lines + nginx_config_test.stderr_lines }}"
  when: nginx_binary.stat.exists and nginx_config_test.rc != 0

# Restart nginx service if configuration was modified or test failed
- name: Restart nginx service if configuration was modified
  ansible.builtin.service:
    name: nginx
    state: restarted
  when: >
    nginx_binary.stat.exists and 
    (nginx_conf_modified.changed or 
    (nginx_config_test.rc != 0 and "'getpwnam(\"nginx\")' in nginx_config_test.stderr"))

# Ensure NGINX is running
- name: Enable and start NGINX service
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: yes
  register: nginx_start
  failed_when: false
  when: nginx_binary.stat.exists

- name: Display NGINX service start result
  ansible.builtin.debug:
    msg: "NGINX service start result: {{ nginx_start }}"
  when: nginx_binary.stat.exists

- name: Check if NGINX is running
  ansible.builtin.command: systemctl status nginx
  register: nginx_status
  changed_when: false
  failed_when: false
  when: nginx_binary.stat.exists

- name: Display NGINX service status
  ansible.builtin.debug:
    msg: "{{ nginx_status.stdout_lines }}"
  when: nginx_binary.stat.exists and nginx_status.rc == 0

- name: Display NGINX service error
  ansible.builtin.debug:
    msg: "NGINX service error: {{ nginx_status.stderr }}"
  when: nginx_binary.stat.exists and nginx_status.rc != 0