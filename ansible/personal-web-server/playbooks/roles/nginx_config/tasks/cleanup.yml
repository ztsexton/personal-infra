---
- name: Install NGINX
  apt:
    name: nginx
    state: present
    update_cache: yes

- name: Wait for systemd to recognize the new NGINX service
  ansible.builtin.command: systemctl daemon-reload
  changed_when: false

- name: Check if Apache is running
  ansible.builtin.command: systemctl status apache2
  register: apache_status
  changed_when: false
  failed_when: false

- name: Force kill any Apache processes if needed
  ansible.builtin.shell: pkill -9 apache2 || true
  changed_when: false
  when: "'active (running)' in apache_status.stdout"

- name: Stop and disable Apache
  service:
    name: apache2
    state: stopped
    enabled: no
  ignore_errors: yes

- name: Create directory for Let's Encrypt verification
  file:
    path: /var/www/letsencrypt/.well-known/acme-challenge
    state: directory
    mode: '0755'
    recurse: yes

- name: Check if port 80 is in use
  ansible.builtin.shell: netstat -tulpn | grep :80
  register: port_80_check
  failed_when: false
  changed_when: false

- name: Check if port 443 is in use
  ansible.builtin.shell: netstat -tulpn | grep :443
  register: port_443_check
  failed_when: false
  changed_when: false

- name: Show process using port 80 if any
  ansible.builtin.debug:
    msg: "Process using port 80: {{ port_80_check.stdout }}"
  when: port_80_check.rc == 0

- name: Show process using port 443 if any
  ansible.builtin.debug:
    msg: "Process using port 443: {{ port_443_check.stdout }}"
  when: port_443_check.rc == 0

- name: Kill processes holding ports 80 and 443 if needed
  ansible.builtin.shell: |
    if [[ "{{ port_80_check.rc }}" == "0" ]]; then
      pid=$(echo "{{ port_80_check.stdout }}" | awk '{print $7}' | cut -d'/' -f1)
      if [[ -n "$pid" ]]; then
        kill -9 $pid || true
      fi
    fi
    if [[ "{{ port_443_check.rc }}" == "0" ]]; then
      pid=$(echo "{{ port_443_check.stdout }}" | awk '{print $7}' | cut -d'/' -f1)
      if [[ -n "$pid" ]]; then
        kill -9 $pid || true
      fi
    fi
  when: port_80_check.rc == 0 or port_443_check.rc == 0
  changed_when: true

- name: Check NGINX configuration before starting
  ansible.builtin.command: nginx -t
  register: nginx_config_test
  changed_when: false
  failed_when: false

- name: Show NGINX configuration test results
  ansible.builtin.debug:
    msg: "{{ nginx_config_test.stdout_lines + nginx_config_test.stderr_lines }}"

# Force start NGINX and make sure it's running before proceeding
- name: Start NGINX service
  ansible.builtin.command: systemctl start nginx
  register: nginx_start
  changed_when: true
  failed_when: false

- name: Show NGINX start errors if any
  ansible.builtin.debug:
    msg: "NGINX start failed: {{ nginx_start.stderr }}"
  when: nginx_start.rc != 0

- name: Get NGINX service status for debugging
  ansible.builtin.command: systemctl status nginx
  register: nginx_status_debug
  changed_when: false
  failed_when: false

- name: Show NGINX service status
  ansible.builtin.debug:
    msg: "{{ nginx_status_debug.stdout_lines + nginx_status_debug.stderr_lines }}"

- name: Enable NGINX service on boot
  ansible.builtin.command: systemctl enable nginx
  changed_when: true
  ignore_errors: yes

- name: Verify NGINX is running
  ansible.builtin.command: systemctl is-active nginx
  register: nginx_is_active
  changed_when: false
  failed_when: false